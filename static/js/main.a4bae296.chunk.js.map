{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","actions.js","api/api.js","constants.js","containers/App.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","requestRobots","dispatch","link","fetch","then","response","json","data","payload","catch","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","event","target","value","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a4bae296.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({name,email,id}) => {\n\treturn (\n\t\n\t\t<div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n\t\t   <img alt='robots' src={`https://robohash.org/${id}?200x200`}/>\n\t\t    <div>\n\t\t   \t  <h2>{name}</h2>\n\t\t   \t  <p>{email}</p>\n\t\t   \t</div>\n\t\t</div>  \n\t\t  \t   \n\t\t);\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) => {\n//\tif(true){\n//\t\tthrow new Error('NOOOOOOO!')\n//\t}\n\treturn (\n\t\t<div> \n           { \n           \trobots.map((user,i) => {\n\t\t    return (\n\t\t\t     <Card key={robots[i].id} \n\t\t\t     id={robots[i].id} \n\t\t\t     name={robots[i].name} \n\t\t\t     email={robots[i].email}/> \n\t\t\t    ); \n\t})}\n        </div> \n\t\t);\n}\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchfield,searchChange}) => {\n\treturn (\n\t\t<div className='pa2'>\n\t\t    <input \n\t\t    className='pa3 ba b--green bg-lightest-blue'\n\t\t    type='search' \n\t\t    placeholder='search robots'\n\t\t    onChange={searchChange}\n\t\t    />\n\t\t</div>    \n\t\t);\n}\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n\treturn (\n\t\t<div style={{overflow: 'scroll', border:'5px solid black',height:'800px'}}>\n\t\t{props.children}\n\t\t</div>\n\t\t)\n};\n\nexport default Scroll;","import React, {Component} from 'react';\n\nclass ErrorBoundary extends Component{\n\tconstructor(props){\n         super(props);\n         this.state = {\n         \thasError:false\n         }\n\t}\n\n    componentDidCatch(error,info){\n         this.setState({hasError:true});\n    }\n\n\trender(){\n\t\tif (this.state.hasError){\n\t\t\treturn <h1>Oooops.  That is not good</h1>\n\t\t}\n\t\treturn this.props.children;\n\t}\n}\n\nexport default ErrorBoundary;\n\n","import { apiCall } from './api/api';\nimport { CHANGE_SEARCH_FIELD,\n         REQUEST_ROBOTS_PENDING,\n         REQUEST_ROBOTS_SUCCESS,\n         REQUEST_ROBOTS_FAILED \n        } from './constants';\n\nexport const setSearchField = (text) => ({\n    type: CHANGE_SEARCH_FIELD,\n\tpayload: text\n});\n\nexport const requestRobots = () => (dispatch) => {\n\tdispatch({type:REQUEST_ROBOTS_PENDING});\n\tapiCall('https://jsonplaceholder.typicode.com/users')\n    .then(data => dispatch({type:REQUEST_ROBOTS_SUCCESS, payload:data}))\n    .catch(error => dispatch({type:REQUEST_ROBOTS_FAILED, payload:error}))\n}","export const apiCall = (link) =>\n  fetch(link).then(response => response.json())","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import React, {Component} from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport './App.css';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport {setSearchField, requestRobots} from '../actions';\nimport {connect} from 'react-redux';\n\nconst mapStateToProps = (state) => {\n  return {\n     searchField: state.searchRobots.searchField,\n     robots: state.requestRobots.robots,\n     isPending: state.requestRobots.isPending,\n     error: state.requestRobots.error\n  }\n}\nconst mapDispatchToProps = (dispatch) => {\n     return {\n      onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n      onRequestRobots: () => dispatch(requestRobots())\n    }\n}\nclass App extends Component {\n  \n   componentDidMount(){\n    \n    this.props.onRequestRobots();\n   }\n   \n    render(){\n        const {searchField , onSearchChange, robots, isPending} = this.props;\n        const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase())\n         })\n    return isPending ?\n      <h1>Loading</h1> \n    :\n    (\n      <div className='tc'>\n        <h1 className='f1'>RoboFriends</h1>\n        <SearchBox searchChange={onSearchChange}/>\n        <Scroll>\n          <ErrorBoundary>\n            <CardList robots = {filteredRobots} />\n          </ErrorBoundary>\n        </Scroll>\n      </div>  \n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { CHANGE_SEARCH_FIELD,\n         REQUEST_ROBOTS_PENDING,\n         REQUEST_ROBOTS_SUCCESS,\n         REQUEST_ROBOTS_FAILED } from './constants';\nconst initialStateSearch = {\n\tsearchField: ''\n}\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n\t\n\tswitch(action.type){\n\t\tcase CHANGE_SEARCH_FIELD:\n\t\t  return Object.assign({}, state, {searchField: action.payload})\n\t\tdefault:\n\t\t  return state;  \n\t}\n}\n\nconst initialStateRobots = {\n\tisPending: false,\n\trobots:[],\n\terror:''\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n\t\n\tswitch(action.type){\n\t\tcase REQUEST_ROBOTS_PENDING:\n\t\t  return Object.assign({}, state, {isPending: true})\n\t\tcase REQUEST_ROBOTS_SUCCESS:\n\t\t  return Object.assign({}, state, {robots: action.payload, isPending:false})\n\t\tcase REQUEST_ROBOTS_FAILED:\n\t\t  return Object.assign({}, state, {error: action.payload, isPending:false})    \n\t\tdefault:\n\t\t  return state;  \n\t}\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport {Provider} from 'react-redux';\nimport {createStore, applyMiddleware, combineReducers} from 'redux';\nimport {createLogger} from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport {searchRobots, requestRobots} from './reducers';\nimport 'tachyons';\n\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchRobots, requestRobots});\nconst store = createStore(rootReducer,applyMiddleware(thunkMiddleware,logger));\nReactDOM.render(\n  <React.StrictMode>\n  <Provider store={store}>\n    <App />\n  </Provider>  \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n"],"sourceRoot":""}